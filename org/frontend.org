#+title: Frontend Tricks
#+author: Tony Aldon

* HTML
** ~<video>~ tag
*** How can I autoplay a video when loading the page?
- Use ~autoplay~ and ~muted~ attributes of ~<video>~ tag.
- ~muted~: The audio will be initially silenced.
- ~autoplay~: The video automatically begins to play back.
- See [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video][video tag (mozilla)]].
- If you want your video automatically begins to play back when
  the page is loaded, ~autoplay~ and ~muted~ attributes as follow:

#+BEGIN_SRC html
<video src="path/to/video.mp4" type="video/mp4" autoplay muted></video>
#+END_SRC

** ~<a>~ tag
*** How can I open a link in another tab?
- Use ~target~ attribute of ~<a>~ tag.
- If you want to open a link in another tab using the ~<a>~ tag,
  use the ~target~ as follow:

#+BEGIN_SRC html
<a href="https://twitter.com/tonyaldon" target="_blank">Tony Aldon</a>
#+END_SRC

** ~<meta>~ tag
*** social media cards
- You have to put some extra lines into the ~<head>~ that allow social
  media to render in a pretty way (cards) some information about your
  website when it is shared. You can test the rendering of the cards
  at [[https://developers.facebook.com/tools/debug/sharing/][facebook sharing]] and at twitter validator.

#+BEGIN_SRC html
<!-- facebook card data -->
<meta property="og:title" content="title">
<meta property="og:description" content="description">
<meta property="og:image" content="path-to-image">
<meta property="og:url" content="url">
<!-- twitter card data -->
<meta name="twitter:card" content="summary_large_image">
<meta property="twitter:title" content="title">
<meta property="twitter:description" content="description">
<meta property="twitter:image" content="path-to-image">
<meta property="twitter:url" content="url">
#+END_SRC
** ~<details>~ tag
- The ~<details>~ tag specifies additional details that the user can
  open and close on demand.
- See [[https://www.w3schools.com/tags/tag_details.asp][tag detail (w3schools)]].
- Try the code:

#+BEGIN_SRC html
<details>
  <summary>Visible part</summary>
  <p>Hidden part that can be visible when the user click on "Visible part".</p>
</details>
#+END_SRC
* CSS
** CSS documentation
- [[https://developer.mozilla.org/en-US/docs/Web/CSS/Reference][css reference (mozilla)]]
** Bulma framework
*** main information
- [[https://bulma.io/][bulma (homepage)]]
- [[https://github.com/jgthms/bulma][bulma (on github)]]
- [[https://bulma.io/documentation/][bulma (documentation)]]
*** templates
- [[https://github.com/aldi/awesome-bulma-templates][awesome bulma templates (github)]]
- [[https://github.com/BulmaTemplates/bulma-templates][bulma templates (github)]]
*** How can I have horizontal navbar on mobile (Bulma)?
- see [[https://github.com/jgthms/bulma/issues/1445][horizontal navbar on mobile (github issue)]].
- First way:
#+BEGIN_SRC css
.navbar-item {
  display: flex;
}

.navbar,
.navbar-menu,
.navbar-start,
.navbar-end {
  align-items: stretch;
  display: flex;
  padding: 0;
}

.navbar-menu{
  flex-grow: 1;
  flex-shrink: 0;
}
.navbar-start{
  justify-content: flex-start;
  margin-right: auto;
}
.navbar-end{
  justify-content: flex-end;
  margin-left: auto;
}
#+END_SRC

- Second way: modify the ~sass~ variable ~$navbar-breakpoint~:

#+BEGIN_SRC scss
$navbar-breakpoint:0;
#+END_SRC

** SASS
See [[https://sass-lang.com/][SASS]] a powerful CSS extension language.
** Centering elements
When you want center thing in CSS, there is a lot of
possibilities. There is no better choice, just remember that you
want the job get done. To read good solutions to center you can see
[[https://www.w3schools.com/css/css_align.asp][w3schools]] and [[https://css-tricks.com/centering-css-complete-guide/][css-tricks]].

Here I just mention some stuff you must keep in mind:
- Take care of the element's sizes (length and height),
- If the child element has the same /dimension/ of the parent
  element, you won't be able to center the child in any way,
- Most of the time we ignore the height of element so don't do as if
  element have a fixed height,
- Prefer solution that are responsive,
- If you use ~transform~ property with the ~translate()~ value, when
  zooming or change size of device the child element can be scaled
  up to be larger than its parent,
- Solution are differents if elements are displayed as ~inline~,
  ~inline-block~ or ~block~.

Here some pieces of CSS you can try to center elements:
1) Try ~margin~ property:

#+BEGIN_SRC css
.child-center {
  margin: auto;
  width: 50%;
}
#+END_SRC

2) Try ~text-align~ property:

#+BEGIN_SRC css
.child-center {
  text-align:center;
  width: 50%;
}
#+END_SRC

3) Try ~display~ and ~marging~ properties for images:

#+BEGIN_SRC css
.img {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 40%;
}
#+END_SRC

4) To verticaly center, try to set the top and bottom
   ~padding~ properties to the same value:

#+BEGIN_SRC css
.child-center {
  padding: 100px 0;
  text-align:center;
}
#+END_SRC

5) If there is only one line you can set ~line-height~ and  ~height~
   to the same value. But if there is more than one line, the ~<p>~
   tag should be ~inline-block~.

#+BEGIN_SRC css
.child-center {
  line-height: 200px;
  height: 200px;
  text-align: center;
}

.child-center p {
  line-height: 1.5;
  display: inline-block;
  vertical-align: middle;
}
#+END_SRC

6) You can use ~transform~ and ~position~.
7) You can use ~flexbox~.
8) You can use ~display~ property with ~table~ value for the parent
   and ~table-cell~ value for the child and add
   ~vertical-align:middle;~ to the child.
** Images
*** Responsive images
- The image will be responsive and scale up and down. But the image
  can be scaled up to be larger than its original size:

#+BEGIN_SRC css
img {
	width: 100%;
	height: auto;
}
#+END_SRC

- The image will never scale up to be larger to the original size:

#+BEGIN_SRC css
img {
	max-width: 100%;
	height: auto;
}
#+END_SRC

*** Background images
- If the ~background-size~ property is set to ~cover~, the background
  image will scale to cover the entire content area. Notice that the
  ~cover~ value keeps the aspect ratio, and some part of the
  background image may be clipped:

#+BEGIN_SRC css
div {
  width: 100%;
  background-image: url('path-to-image.jpg');
  background-size: cover;
  background-position: center
}
#+END_SRC

- You can use media queries to display different images on different
  devices.
*** How can I position text over an image?
- You have to use both the properties ~position~ and ~transform~.
- ~position: relative;~: to the father tag,
- ~position: absolute;~: to the child tag containing the text:

#+BEGIN_SRC html
<div class="container">
  <img class="image" src="path-to-image.jpg"/>
  <div class="text"><p>My text</p></div>
</div>
#+END_SRC

#+BEGIN_SRC css
.container {
  position: relative;
  text-align: center;
}

.image {
  max-width: 100%;
  height: auto;
}

.text p {
  position: absolute;
  left: 50%;
  top: 50%;
  transform:  translate(-50%, -50%);
}
#+END_SRC

** Hover
*** How to zoom on hover?
- Use properties ~transition~ and ~transform~.
- see [[https://www.w3schools.com/howto/howto_css_zoom_hover.asp][zoom hover]].
- If you want to zoom by 150% a green square at the speed ~.2s~ when
  you hover the mouse, run the code:

#+BEGIN_SRC css
.zoom {
  padding: 50px;
  margin: 0 auto;
  background-color: green;
  width: 200px;
  height: 200px;
  transition: transform .2s;
}

.zoom:hover {
  transform: scale(1.5);
}
#+END_SRC

#+BEGIN_SRC html
<div class="zoom"></div>
#+END_SRC

** Animation
- [[https://www.w3schools.com/css/css3_animations.asp][css animation]]
** Media queries
*** How can I test media queries progammatically?
- Use the ~MediaQueryList~ interface provide by the ~DOM~.
- See [[https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Testing_media_queries][testing media queries (mozilla)]].
** CSS Custom properties (variables)
- A CSS custom properties is defined inside a ruleset, scoped by the
  selector, start with a ~--~ and is use via the function ~var()~.
- See [[https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties][Using_CSS_custom_properties]].
- Declaring a custom property:

#+BEGIN_SRC css
element {
  --main-bg-color: brown;
}
#+END_SRC

- Using a custom property:

#+BEGIN_SRC css
element {
  background-color: var(--main-bg-color);
}
#+END_SRC

** Dark mode
- [[https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/][complete guide dark-mode (css-tricks)]]
- [[https://material.io/design/color/dark-theme.html][dark-theme (material design)]]
- [[https://css-tricks.com/dark-mode-and-variable-fonts/][dark-mode and variable font (css-tricks)]]
- [[https://northflank.com/][northflank (cool dark design)]]
** CSS modules
- [[https://css-tricks.com/css-modules-part-1-need/][css modules tutorials (css-tricks)]]
* Javascript
** Javascript questions
- [[https://github.com/sudheerj/javascript-interview-questions/blob/master/README.md][javascript interview question]]
- [[https://github.com/lydiahallie/javascript-questions][javascript questions]]
- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript][A re-introduction to JavaScript]]
** higlightjs
*** How can I colors code block according to a given programming language?
- Use [[https://highlightjs.org/][highlightjs]] javascript library.
- ~highlightjs~: Javascript syntax highlighter.
- See [[https://highlightjs.readthedocs.io/en/latest/][documentation]], [[https://highlightjs.readthedocs.io/en/latest/css-classes-reference.html][css class reference]], [[https://highlightjs.readthedocs.io/en/latest/language-guide.html][language guide]].
- If you want to highlight ~bash~ code in your document, add the
  link to the style (~default~ highlightjs), load the package and
  initialize on load ~hljs~. To do so, add this lines to your
  document:

#+BEGIN_SRC html
<link rel="stylesheet" href="/path/to/styles/default.css">
<script src="/path/to/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
#+END_SRC

  The use the tags ~<pre><code class="bash">~ to highlight any pieces
  of ~bash~ code as follow:

#+BEGIN_SRC html
<pre><code class="bash">...</code></pre>
#+END_SRC

*** How can I use the colors use by ~highlightjs~ but not inside tags ~<pre><code>...</code></pre>~ but inline?
- Use ~<span>~ tag and ~hljs~ classes defined by ~highlightjs~.
- See [[https://highlightjs.readthedocs.io/en/latest/css-classes-reference.html][css class reference]], [[https://highlightjs.readthedocs.io/en/latest/language-guide.html][language guide]].
- If you want to highlight the word ~function~ as ~highlightjs~
  would do for the ~javascript~ language, you have to notice that
  ~function~ is a ~keyword~ in the javascript language and
  ~highlightjs~ use the class ~hljs-keyword~ to highlight it. So
  we do:

  #+BEGIN_SRC html
  ...some text <span class="hljs-keyword">function</span> some text...
  #+END_SRC

** js regexp
- See [[https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_r%C3%A9guli%C3%A8res][javascript regex (mozilla)]].
* React js
** Documentation
- [[https://reactjs.org/][reactjs]]
- [[https://reactjs.org/tutorial/tutorial.html][tutorial (reactjs)]]
- [[https://reactjs.org/docs/getting-started.html][getting-started (reactjs)]]
- [[https://reactjs.org/docs/hello-world.html][hello-world (reactjs)]]
- [[https://reactjs.org/docs/thinking-in-react.html][thinking-in-react (reactjs)]]
** create-react-app
- [[https://create-react-app.dev/docs/][create react app (documentation)]]
- To start writting a ~react~ web app using ~create-react-app~, run
  the command:

#+BEGIN_SRC bash
npx create-react-app app
#+END_SRC
*** How to fix "Error: ENOSPC: System limit for number of file watchers reached,..."?
- See [[https://stackoverflow.com/questions/55763428/react-native-error-enospc-system-limit-for-number-of-file-watchers-reached][error enospc system limit (stackoverflow)]] and [[https://github.com/facebook/create-react-app/issues/7612][create react app - issue 7612]].
- To solve the problem, run the commands:

#+BEGIN_SRC bash
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf
sudo sysctl -p
#+END_SRC

** testing
*** react testing library
- [[https://kentcdodds.com/blog/testing-implementation-details][testing-implementation-details (article)]]
- [[https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change][making-your-ui-tests-resilient-to-change (article)]]
- [[https://www.npmjs.com/package/@testing-library/react][@testing-library/react (npm)]]
- [[https://testing-library.com/docs/react-testing-library/intro][react-testing-library (documentation)]]
- [[https://testing-library.com/docs/react-testing-library/cheatsheet][react-testing-library (cheatsheet)]]
- [[https://www.robinwieruch.de/react-testing-library][react-testing-library (tutorial)]]
*** Jest
- See [[https://jestjs.io/docs/en/snapshot-testing][snapshot testing (Jest)]].
- Inline snapshot use ~prettier~ that isn't installed by default when
  using ~create-react-app~. To install it, in your project root
  directory, run the command:

#+BEGIN_SRC bash
npm install --save-dev --save-exact prettier
#+END_SRC

- Focusing and Excluding Tests: You can replace ~it()~ with ~xit()~ to
  temporarily exclude a test from being executed. Similarly, ~fit()~
  lets you focus on a specific test without running any other tests.
- See [[https://jestjs.io/docs/en/expect.html][jestjs/expect (documentation)]].
- See [[https://github.com/testing-library/jest-dom][jest-dom (github)]].
*** create-react-app
- [[https://create-react-app.dev/docs/running-tests/][running test (create-react-app)]]
** js modules
- [[https://www.npmjs.com/package/magic-string][magic-string]]
- [[https://github.com/rexxars/react-markdown][react-markdown]]
- [[https://www.npmjs.com/package/classnames][classnames]]
- [[https://www.npmjs.com/package/react-collapse][react-collapse]]
** ~super(props)~ in class declaration
- See [[https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e][difference-between-super-and-super(props)]].
* Links
** Learning
- [[https://frontendmasters.com/books/front-end-handbook/2019/][frontend handbook]]: book on frontend (2019) by Cody Lindley
- [[https://github.com/sudheerj/javascript-interview-questions/blob/master/README.md][javascript interview questions]]: by SudheerJonna
- [[https://github.com/lydiahallie/javascript-questions][javascript questions]]: by Lydia Hallie
- [[https://codepen.io/][codepen.io]]: CodePen is a social development environment for
  front-end designers and developers.
** Tools and library
- [[https://css-transform.moro.es/][css-transform]]: 2D & 3D CSS Transform functions visualizer.
- [[https://github.com/4d11/csskrt-csskrt][csskrt]]: automatically add css to html tags.
- [[https://htmx.org/][htmx]]: allows you to access AJAX, WebSockets and Server Sent Events
  directly in HTML, using attributes.
- [[https://fonts.google.com][Google Fonts]]: free font hosted by Google.
- [[https://materialdesignicons.com/][Material design icons]]: growing icon collection.
- [[https://github.com/bradtraversy/design-resources-for-developers][design resources for developers]]
** Good designs
- [[https://northflank.com/][northflank]]: The fullstack cloud platform. Regain the initiative and
  ship smarter. Reduce stress, time and cost.
