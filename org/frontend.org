#+title: Frontend Tricks
#+author: Tony Aldon

* HTML
** ~<video>~ tag
*** How can I autoplay a video when loading the page?
- Use ~autoplay~ and ~muted~ attributes of ~<video>~ tag.
- ~muted~: The audio will be initially silenced.
- ~autoplay~: The video automatically begins to play back.
- See [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video][video tag (mozilla)]].
- If you want your video automatically begins to play back when
  the page is loaded, ~autoplay~ and ~muted~ attributes as follow:

#+BEGIN_SRC html
<video src="path/to/video.mp4" type="video/mp4" autoplay muted></video>
#+END_SRC

** ~<a>~ tag
*** How can I open a link in another tab?
- Use ~target~ attribute of ~<a>~ tag.
- If you want to open a link in another tab using the ~<a>~ tag,
  use the ~target~ as follow:

#+BEGIN_SRC html
<a href="https://twitter.com/tonyaldon" target="_blank">Tony Aldon</a>
#+END_SRC

** ~meta~ tag
*** social media cards
- You have to put some extra lines into the ~<head>~ that allow social
  media to render in a pretty way (cards) some information about your
  website when it is shared. You can test the rendering of the cards
  at [[https://developers.facebook.com/tools/debug/sharing/][facebook sharing]] and at twitter validator.

#+BEGIN_SRC html
<!-- facebook card data -->
<meta property="og:title" content="title">
<meta property="og:description" content="description">
<meta property="og:image" content="path-to-image">
<meta property="og:url" content="url">
<!-- twitter card data -->
<meta name="twitter:card" content="summary_large_image">
<meta property="twitter:title" content="title">
<meta property="twitter:description" content="description">
<meta property="twitter:image" content="path-to-image">
<meta property="twitter:url" content="url">
#+END_SRC
* CSS
** Bulma framework
*** main information
- [[https://bulma.io/][bulma (homepage)]]
- [[https://github.com/jgthms/bulma][bulma (on github)]]
- [[https://bulma.io/documentation/][bulma (documentation)]]
*** templates
- [[https://github.com/aldi/awesome-bulma-templates][awesome bulma templates (github)]]
- [[https://github.com/BulmaTemplates/bulma-templates][bulma templates (github)]]
** SASS
See [[https://sass-lang.com/][SASS]] a powerful CSS extension language.
** Centering elements
When you want center thing in CSS, there is a lot of
possibilities. There is no better choice, just remember that you
want the job get done. To read good solutions to center you can see
[[https://www.w3schools.com/css/css_align.asp][w3schools]] and [[https://css-tricks.com/centering-css-complete-guide/][css-tricks]].

Here I just mention some stuff you must keep in mind:
- Take care of the element's sizes (length and height),
- If the child element has the same /dimension/ of the parent
  element, you won't be able to center the child in any way,
- Most of the time we ignore the height of element so don't do as if
  element have a fixed height,
- Prefer solution that are responsive,
- If you use ~transform~ property with the ~translate()~ value, when
  zooming or change size of device the child element can be scaled
  up to be larger than its parent,
- Solution are differents if elements are displayed as ~inline~,
  ~inline-block~ or ~block~.

Here some pieces of CSS you can try to center elements:
1) Try ~margin~ property:

#+BEGIN_SRC css
.child-center {
  margin: auto;
  width: 50%;
}
#+END_SRC

2) Try ~text-align~ property:

#+BEGIN_SRC css
.child-center {
  text-align:center;
  width: 50%;
}
#+END_SRC

3) Try ~display~ and ~marging~ properties for images:

#+BEGIN_SRC css
.img {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 40%;
}
#+END_SRC

4) To verticaly center, try to set the top and bottom
   ~padding~ properties to the same value:

#+BEGIN_SRC css
.child-center {
  padding: 100px 0;
  text-align:center;
}
#+END_SRC

5) If there is only one line you can set ~line-height~ and  ~height~
   to the same value. But if there is more than one line, the ~<p>~
   tag should be ~inline-block~.

#+BEGIN_SRC css
.child-center {
  line-height: 200px;
  height: 200px;
  text-align: center;
}

.child-center p {
  line-height: 1.5;
  display: inline-block;
  vertical-align: middle;
}
#+END_SRC

6) You can use ~transform~ and ~position~.
7) You can use ~flexbox~.
8) You can use ~display~ property with ~table~ value for the parent
   and ~table-cell~ value for the child and add
   ~vertical-align:middle;~ to the child.
** Images
*** Responsive images
- The image will be responsive and scale up and down. But the image
  can be scaled up to be larger than its original size:

#+BEGIN_SRC css
img {
	width: 100%;
	height: auto;
}
#+END_SRC

- The image will never scale up to be larger to the original size:

#+BEGIN_SRC css
img {
	max-width: 100%;
	height: auto;
}
#+END_SRC

*** Background images
- If the ~background-size~ property is set to ~cover~, the background
  image will scale to cover the entire content area. Notice that the
  ~cover~ value keeps the aspect ratio, and some part of the
  background image may be clipped:

#+BEGIN_SRC css
div {
  width: 100%;
  background-image: url('path-to-image.jpg');
  background-size: cover;
  background-position: center
}
#+END_SRC

- You can use media queries to display different images on different
  devices.
*** How can I position text over an image?
- You have to use both the properties ~position~ and ~transform~.
- ~position: relative;~: to the father tag,
- ~position: absolute;~: to the child tag containing the text:

#+BEGIN_SRC html
<div class="container">
  <img class="image" src="path-to-image.jpg"/>
  <div class="text"><p>My text</p></div>
</div>
#+END_SRC

#+BEGIN_SRC css
.container {
  position: relative;
  text-align: center;
}

.image {
  max-width: 100%;
  height: auto;
}

.text p {
  position: absolute;
  left: 50%;
  top: 50%;
  transform:  translate(-50%, -50%);
}
#+END_SRC

* Javascript
** Javascript questions
[[https://github.com/sudheerj/javascript-interview-questions/blob/master/README.md][javascript interview question]]
[[https://github.com/lydiahallie/javascript-questions][javascript questions]]
** higlightjs
*** How can I colors code block according to a given programming language?
- Use [[https://highlightjs.org/][highlightjs]] javascript library.
- ~highlightjs~: Javascript syntax highlighter.
- See [[https://highlightjs.readthedocs.io/en/latest/][documentation]], [[https://highlightjs.readthedocs.io/en/latest/css-classes-reference.html][css class reference]], [[https://highlightjs.readthedocs.io/en/latest/language-guide.html][language guide]].
- If you want to highlight ~bash~ code in your document, add the
  link to the style (~default~ highlightjs), load the package and
  initialize on load ~hljs~. To do so, add this lines to your
  document:

#+BEGIN_SRC html
<link rel="stylesheet" href="/path/to/styles/default.css">
<script src="/path/to/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
#+END_SRC

  The use the tags ~<pre><code class="bash">~ to highlight any pieces
  of ~bash~ code as follow:

#+BEGIN_SRC html
<pre><code class="bash">...</code></pre>
#+END_SRC

*** How can I use the colors use by ~highlightjs~ but not inside tags ~<pre><code>...</code></pre>~ but inline?
- Use ~<span>~ tag and ~hljs~ classes defined by ~highlightjs~.
- See [[https://highlightjs.readthedocs.io/en/latest/css-classes-reference.html][css class reference]], [[https://highlightjs.readthedocs.io/en/latest/language-guide.html][language guide]].
- If you want to highlight the word ~function~ as ~highlightjs~
  would do for the ~javascript~ language, you have to notice that
  ~function~ is a ~keyword~ in the javascript language and
  ~highlightjs~ use the class ~hljs-keyword~ to highlight it. So
  we do:

  #+BEGIN_SRC html
  ...some text <span class="hljs-keyword">function</span> some text...
  #+END_SRC

* React js
* Links
** Inspiring
- [[https://css-transform.moro.es/][css-transform]]
- [[https://cssfx.dev/][cssfx]]
- [[https://codepen.io/ainalem/pen/byqBNK][css gradient/svg]]
- [[https://codepen.io/ainalem/pen/ZdVywW][toggle button]]
- [[https://codepen.io/][codepen.io]]
- [[https://github.com/bradtraversy/design-resources-for-developers][design resources for developers (traversy media)]]
** to sort
[[https://fonts.google.com][Google Fonts]]
[[https://frontendmasters.com/books/front-end-handbook/2019/][frontend handbook]], [[https://www.w3schools.com/howto/howto_css_zoom_hover.asp][zoom hover]], [[https://www.w3schools.com/css/css3_animations.asp][css animation]], [[https://www.w3schools.com/css/css3_variables.asp][css3 variables]],
[[https://www.w3schools.com/jsref/met_win_matchmedia.asp][js and media queries]], [[https://www.youtube.com/watch?v=vs34f9FiHps][css tricks video]], [[https://davidwalsh.name/pseudo-element][javascript get/set pseudo element]],
[[http://mcgivery.com/htmlelement-pseudostyle-settingmodifying-before-and-after-in-javascript/][javascript get/set pseudo element]], [[https://www.w3schools.com/html/html_forms.asp][html forms]], [[https://www.w3schools.com/howto/howto_css_responsive_text.asp][text css responsive]],
[[https://css-tricks.com/snippets/css/a-guide-to-flexbox/][css flexbox]], [[https://www.w3schools.com/cssref/css_units.asp][css units]], [[https://www.w3schools.com/cssref/css3_pr_mediaquery.asp][css @media]]
** icons
- [[https://github.com/refldactoringui/heroicons][heroicons (github)]]
- [[https://ionicons.com/][ionicons (homepage)]]
- [[https://materialdesignicons.com/][material design icons (homepage)]]
** tools
- [[https://github.com/4d11/csskrt-csskrt][csskrt - automatically add css to html tags (github)]]
** ideas
- [[https://htmx.org/][htmx]]
